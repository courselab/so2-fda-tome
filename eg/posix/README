#    SPDX-FileCopyrightText: 2021 Monaco F. J. <monaco@usp.br>
#   
#    SPDX-License-Identifier: GPL-3.0-or-later
#
#    This file was generated by SYSeg from a corresponding m4 script.
#    SYSeg is available at https://gitlab.com/monaco/syseg.

 

##
##  NOTE: The contents of this directory are being reviewed for assessment
##        and potential revision of source code and documentation.
##
##  -----------------------------------------------------------------------



 Title
 ==============================

 This directory contains simple examples illustrating the usage of
 the POSIX API.



 Instructions
 ------------------------------

 The code examples in this directory include explanatory comments annotated
 directly in the source file comments. Those notes are complemented by the
 additional technical discussions provided in this README file.
 
 While some examples may be independent one from another, there may be also
 sequences of code snippets in which each example builds on its predecessor.
 In those cases, it may be interesting to go through the code examples in the
 same order they are introduced in the present README.
 
 For convenience, a build script (e.g. Makefile) may be provided which contains
 rules to compile, execute and inspect the contents of the source and object
 the examples are built and executed.


 Contents
 ------------------------------

 * getpid.c	Usage of getpid() and getppid().

   		Build, execute and inspect the running process with

		   ps uf

 		Observe that getpid's is a child of the shell.

		The child's return status is informed to the parent:

		  echo $?

 * fork.c       Duplicate the caller process.

 * fork-01.c    Execute different code in parent and child.

 * fork-02.c	What happens if either parent or child terminates first.

 * exec.c	Exec a binary program.

 * wait.c	Wait for child to terminate.

 * shell.c	A very simple shell skeleton.

 * shell-01.c	Like shell.c, but accepting program arguments.

 * pipe.c 	IPC with pipes.

 * 


